from pyrogram import Client, filters
import asyncio
from random import randint


BLACKLIST = []
MIN_DELAY = 1
MAX_DELAY = 20
DELAY_DIV = 100

class AutoAnswerClient(Client):
    def __init__(self, str, app_id, app_hash):
        super().__init__(str, app_id, app_hash)
        
        self.already = {}
        self.enable = False
        
        self.blacklist = BLACKLIST
        self.stopfrase = ["–æ–∫–µ–π", "—Ö–æ—Ä–æ—à–æ", "okey", "–ø–æ–Ω—è—Ç–Ω–æ", "—Ü–µ–Ω—é", "–ø–æ–Ω", "–æ–∫", "ok"]
        
        self.notread = []
        
        
app_id = ""
app_hash = ""

try:
    app = AutoAnswerClient("my_account", app_id, app_hash)
except:
    quit("Should be app_id and app_hash")
        

@app.on_message(filters.private)
async def mes(client, message):
    
    if message.outgoing:
        await handle_outgo(client, message)
        return
        
    if message.chat.id in client.blacklist:
         return
    
    if message.from_user.is_self:
        
        if "AS" in message.text:
            client.enable = False
            client.already = {}
            client.blacklist = BLACKLIST
            await client.send_message(message.chat.id, "Stopped")
        elif "AE" in message.text:
            client.enable = True
            await client.send_message(message.chat.id, "Started")
        elif "AR" in message.text:
            
            for cid in client.notread:
                
                await client.read_chat_history(cid)
                
            client.notread = []
                
            await client.send_message(message.chat.id, "I am read all garbage")
        
        return
    
    
    if not message.chat.type.value == "private":
        return
    elif not client.enable:
        return
    else:
        await asyncio.sleep(randint(MIN_DELAY, MAX_DELAY)/DELAY_DIV)
    
    if message.from_user.id in client.already.keys():
        if message.text.lower() in client.stopfrase and not client.already[message.from_user.id] > 4:
            client.already[message.from_user.id] = 5
            await client.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ü–µ–Ω–∏—Ç–µ –º–æ–π —Ç—Ä—É–¥ üòç")
        elif client.already[message.from_user.id] == 3:
            await client.send_message(message.chat.id, "–ü–æ—á–µ–º—É —Ç—ã –Ω–µ —Ü–µ–Ω–∏—à—å –º–æ–π —Ç—Ä—É–¥ :(")
        elif client.already[message.from_user.id] == 4:
            await client.send_message(message.chat.id, "–ù—É –≤—Å—ë —è –æ–±–∏–¥–µ–ª—Å—è")
        elif client.already[message.from_user.id] < 3:
            await client.send_message(message.chat.id, "–Ø –∂–µ –Ω–∞–ø–∏—Å–∞–ª –º–æ–π —Ö–æ–∑—è–∏–Ω –∑–∞–Ω—è—Ç")
        else:
            return
        client.already[message.from_user.id] += 1
        await asyncio.sleep(randint(MIN_DELAY, MAX_DELAY)/DELAY_DIV)
    else:
        client.already[message.from_user.id] = 1
        await client.send_message(message.chat.id, "–≠—Ç–æ—Ç –∫–æ–∂–∞–Ω–Ω—ã–π –º–µ—à–æ–∫ –∑–∞–Ω—è—Ç, –Ω–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤—Å–µ–≥–¥–∞ —Å–≤–æ–±–æ–¥–µ–Ω :)")
        await asyncio.sleep(randint(MIN_DELAY, MAX_DELAY)/DELAY_DIV)
        await client.send_message(message.chat.id, "–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –≤–∞–º —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
        await asyncio.sleep(randint(MIN_DELAY, MAX_DELAY)/DELAY_DIV)
        await client.send_message(message.chat.id, "–ê –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ 19:00 –ø–æ –º—Å–∫ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–Ω –±—É–¥–µ—Ç —É–∂–µ –±–æ–ª–µ–µ –º–µ–Ω–µ–µ —Å–≤–æ–±–æ–¥–µ–Ω")
        await asyncio.sleep(randint(MIN_DELAY, MAX_DELAY)/DELAY_DIV)
        await client.send_message(message.chat.id, "–õ–∏–±–æ –≤–æ–æ–±—â–µ –ø–∏—à–∏—Ç–µ @...")
        await asyncio.sleep(randint(MIN_DELAY, MAX_DELAY)/DELAY_DIV)
        client.notread.append(message.chat.id)
    
    return
    
async def handle_outgo(client, message):
    if message.chat.id not in client.blacklist:
        client.blacklist.append(message.chat.id)
    
        await message.reply_text("–æ–Ω –∑–¥–µ—Å—å –º–æ–π —Ö–æ–∑—è–∏–Ω –∑–¥–µ—Å—å!", reply_to_message_id=message.id)


def main():
    print("started")
    app.run()

if __name__ == "__main__":
    main()